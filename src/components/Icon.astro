---
import { Image } from 'astro:assets';
const { lightIcon, darkIcon, href } = Astro.props;
---

<a 
  class="themeIcon p-2 rounded-full border btn-icon"
  href={href}
  target="_blank"
  rel="noopener noreferrer"
>
  <Image src={darkIcon} width="30" height="30" alt="icones para contato." class="dark-icon" />
  <Image src={lightIcon} width="30" height="30" alt="icones para contato." class="light-icon hidden" />
</a>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.themeIcon').forEach((themeIconEl) => {
      const lightIconEl = themeIconEl.querySelector('.light-icon');
      const darkIconEl = themeIconEl.querySelector('.dark-icon');

      const updateIcon = () => {
        if (document.body.classList.contains('dark-mode')) {
          lightIconEl.classList.add('hidden');
          darkIconEl.classList.remove('hidden');
          themeIconEl.classList.add('hover:bg-gray-800');
          themeIconEl.classList.remove('hover:bg-gray-200');
        } else {
          lightIconEl.classList.remove('hidden');
          darkIconEl.classList.add('hidden');
          themeIconEl.classList.add('hover:bg-gray-200');
          themeIconEl.classList.remove('hover:bg-gray-800');
        }
      };

      updateIcon();

      const observer = new MutationObserver((mutationsList) => {
        mutationsList.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            updateIcon();
          }
        });
      });

      observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
    });
  });
</script>
