---
// NightSky.astro
---
<canvas 
  id="night-sky" 
  class="block fixed top-0 left-0 w-full h-full" 
  style="z-index: -1;"
></canvas>

<script is:inline>
  // Seleciona o canvas e configura o contexto 2D
  const canvas = document.getElementById("night-sky");
  const ctx = canvas.getContext("2d");

  // Ajusta o canvas para ocupar toda a viewport
  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();

  // Cria um array de estrelas com posições, tamanho e velocidade aleatórios
  const stars = [];
  const numStars = 150; // ajuste a quantidade conforme desejar

  for (let i = 0; i < numStars; i++) {
    stars.push({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      radius: Math.random() * 1.5 + 0.5,
      speed: Math.random() * 0.5 + 0.2
    });
  }

  // Retorna as cores de fundo e das estrelas conforme a presença da classe .dark-mode no body
  function getThemeColors() {
    if (document.body.classList.contains('dark-mode')) {
      return { bgColor: 'hsl(216deg 64.69% 2.96%)', starColor: '#fff' };
    } else {
      return { bgColor: '#FFFF', starColor: 'black' };
    }
  }

  // Atualiza a posição das estrelas, movendo-as para baixo
  function updateStars() {
    for (let star of stars) {
      star.y += star.speed;
      if (star.y > canvas.height) {
        star.y = 0;
        star.x = Math.random() * canvas.width;
      }
    }
  }

  // Desenha o fundo e as estrelas com base nas cores do tema atual
  function drawStars() {
    const { bgColor, starColor } = getThemeColors();
    
    // Preenche o fundo
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Desenha as estrelas
    ctx.fillStyle = starColor;
    for (let star of stars) {
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  // Configuração da estrela cadente
  let shootingStar = null;
  let shootingStarTimeout;

  function createShootingStar() {
    shootingStar = {
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height / 2, // aparece na metade superior
      radius: Math.random() * 2 + 1.5, // ligeiramente maior que as outras estrelas
      length: Math.random() * 100 + 50,
      speedX: Math.random() * 4 + 2,
      speedY: Math.random() * 4 + 2,
      opacity: 1
    };
  }

  function drawShootingStar() {
    if (!shootingStar) return;

    const { x, y, radius, length, speedX, speedY, opacity } = shootingStar;

    // Desenha a cauda da estrela cadente
    const tailX = x - length * (speedX / (speedX + speedY));
    const tailY = y - length * (speedY / (speedX + speedY));

    ctx.save();
    ctx.globalAlpha = opacity;
    const gradient = ctx.createLinearGradient(x, y, tailX, tailY);
    gradient.addColorStop(0, getThemeColors().starColor);
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(tailX, tailY);
    ctx.lineWidth = radius;
    ctx.strokeStyle = gradient;
    ctx.stroke();
    ctx.restore();

    ctx.save();
    ctx.globalAlpha = opacity;
    ctx.fillStyle = getThemeColors().starColor;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fill();
    ctx.restore();

    shootingStar.x += speedX;
    shootingStar.y += speedY;
    shootingStar.opacity -= 0.02;

    if (shootingStar.opacity <= 0) {
      shootingStar = null;
    }
  }

  function startShootingStarCycle() {
    createShootingStar();
    shootingStarTimeout = setTimeout(() => {
      startShootingStarCycle();
    }, 4000);
  }

  startShootingStarCycle();

  function animate() {
    updateStars();
    drawStars();
    drawShootingStar();
    requestAnimationFrame(animate);
  }
  animate();
</script>